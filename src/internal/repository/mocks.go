// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/repository/interface.go
//
// Generated by this command:
//
//	mockgen -destination=../internal/repository/mocks.go -package=repository -source=../internal/repository/interface.go
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	actor "vk-film-library/internal/entity/actor"
	movie "vk-film-library/internal/entity/movie"
	user "vk-film-library/internal/entity/user"
	transaction "vk-film-library/internal/transaction"

	gomock "go.uber.org/mock/gomock"
)

// MockActor is a mock of Actor interface.
type MockActor struct {
	ctrl     *gomock.Controller
	recorder *MockActorMockRecorder
}

// MockActorMockRecorder is the mock recorder for MockActor.
type MockActorMockRecorder struct {
	mock *MockActor
}

// NewMockActor creates a new mock instance.
func NewMockActor(ctrl *gomock.Controller) *MockActor {
	mock := &MockActor{ctrl: ctrl}
	mock.recorder = &MockActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActor) EXPECT() *MockActorMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActor) CreateActor(ts transaction.Session, p actor.CreateActorParam) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", ts, p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorMockRecorder) CreateActor(ts, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActor)(nil).CreateActor), ts, p)
}

// Delete mocks base method.
func (m *MockActor) Delete(ts transaction.Session, actorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ts, actorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockActorMockRecorder) Delete(ts, actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActor)(nil).Delete), ts, actorID)
}

// DeleteActorMovie mocks base method.
func (m *MockActor) DeleteActorMovie(ts transaction.Session, movieID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorMovie", ts, movieID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActorMovie indicates an expected call of DeleteActorMovie.
func (mr *MockActorMockRecorder) DeleteActorMovie(ts, movieID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorMovie", reflect.TypeOf((*MockActor)(nil).DeleteActorMovie), ts, movieID)
}

// DeleteActorMovies mocks base method.
func (m *MockActor) DeleteActorMovies(ts transaction.Session, actorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorMovies", ts, actorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActorMovies indicates an expected call of DeleteActorMovies.
func (mr *MockActorMockRecorder) DeleteActorMovies(ts, actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorMovies", reflect.TypeOf((*MockActor)(nil).DeleteActorMovies), ts, actorID)
}

// FindActorFilmList mocks base method.
func (m *MockActor) FindActorFilmList(ts transaction.Session, actorID int) ([]movie.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActorFilmList", ts, actorID)
	ret0, _ := ret[0].([]movie.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActorFilmList indicates an expected call of FindActorFilmList.
func (mr *MockActorMockRecorder) FindActorFilmList(ts, actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActorFilmList", reflect.TypeOf((*MockActor)(nil).FindActorFilmList), ts, actorID)
}

// LoadActorList mocks base method.
func (m *MockActor) LoadActorList(ts transaction.Session) ([]actor.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadActorList", ts)
	ret0, _ := ret[0].([]actor.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadActorList indicates an expected call of LoadActorList.
func (mr *MockActorMockRecorder) LoadActorList(ts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadActorList", reflect.TypeOf((*MockActor)(nil).LoadActorList), ts)
}

// Update mocks base method.
func (m *MockActor) Update(ts transaction.Session, p actor.UpdateActorParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ts, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockActorMockRecorder) Update(ts, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockActor)(nil).Update), ts, p)
}

// MockMovie is a mock of Movie interface.
type MockMovie struct {
	ctrl     *gomock.Controller
	recorder *MockMovieMockRecorder
}

// MockMovieMockRecorder is the mock recorder for MockMovie.
type MockMovieMockRecorder struct {
	mock *MockMovie
}

// NewMockMovie creates a new mock instance.
func NewMockMovie(ctrl *gomock.Controller) *MockMovie {
	mock := &MockMovie{ctrl: ctrl}
	mock.recorder = &MockMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovie) EXPECT() *MockMovieMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovie) CreateMovie(ts transaction.Session, p movie.CreateMovieParam) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", ts, p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieMockRecorder) CreateMovie(ts, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovie)(nil).CreateMovie), ts, p)
}

// DeleteMovie mocks base method.
func (m *MockMovie) DeleteMovie(ts transaction.Session, movieID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ts, movieID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieMockRecorder) DeleteMovie(ts, movieID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovie)(nil).DeleteMovie), ts, movieID)
}

// FindMovieListByActorName mocks base method.
func (m *MockMovie) FindMovieListByActorName(ts transaction.Session, actorName string) ([]movie.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMovieListByActorName", ts, actorName)
	ret0, _ := ret[0].([]movie.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMovieListByActorName indicates an expected call of FindMovieListByActorName.
func (mr *MockMovieMockRecorder) FindMovieListByActorName(ts, actorName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMovieListByActorName", reflect.TypeOf((*MockMovie)(nil).FindMovieListByActorName), ts, actorName)
}

// FindMovieListByTitle mocks base method.
func (m *MockMovie) FindMovieListByTitle(ts transaction.Session, title string) ([]movie.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMovieListByTitle", ts, title)
	ret0, _ := ret[0].([]movie.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMovieListByTitle indicates an expected call of FindMovieListByTitle.
func (mr *MockMovieMockRecorder) FindMovieListByTitle(ts, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMovieListByTitle", reflect.TypeOf((*MockMovie)(nil).FindMovieListByTitle), ts, title)
}

// GetMovieList mocks base method.
func (m *MockMovie) GetMovieList(ts transaction.Session) ([]movie.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieList", ts)
	ret0, _ := ret[0].([]movie.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieList indicates an expected call of GetMovieList.
func (mr *MockMovieMockRecorder) GetMovieList(ts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieList", reflect.TypeOf((*MockMovie)(nil).GetMovieList), ts)
}

// UpdateMovie mocks base method.
func (m *MockMovie) UpdateMovie(ts transaction.Session, p movie.UpdateMovieParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", ts, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMovieMockRecorder) UpdateMovie(ts, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovie)(nil).UpdateMovie), ts, p)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// GetUseInfo mocks base method.
func (m *MockAuth) GetUseInfo(ts transaction.Session, login string) (user.RegisteredUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUseInfo", ts, login)
	ret0, _ := ret[0].(user.RegisteredUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUseInfo indicates an expected call of GetUseInfo.
func (mr *MockAuthMockRecorder) GetUseInfo(ts, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUseInfo", reflect.TypeOf((*MockAuth)(nil).GetUseInfo), ts, login)
}

// RegisterUser mocks base method.
func (m *MockAuth) RegisterUser(ts transaction.Session, user user.RegisteredUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ts, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAuthMockRecorder) RegisterUser(ts, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuth)(nil).RegisterUser), ts, user)
}
